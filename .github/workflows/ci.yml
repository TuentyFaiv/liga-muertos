name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22'
  BUN_VERSION: '1.2.20'

jobs:
  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('front/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate paraglide files
        run: bunx paraglide-js compile --project ./project.inlang --outdir ./src/logic/paraglide

      - name: Type check
        run: bun run check

      - name: Lint check
        run: bun run lint

      - name: Unit tests
        run: bun run test:unit -- --run

      - name: Build project
        run: bun run build

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps chromium

      - name: E2E tests
        run: bun run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: front/playwright-report/
          retention-days: 30

  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./back

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: back

      - name: Check code formatting
        run: cargo fmt -- --check

      - name: Lint with Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Install cargo-machete
        run: cargo install cargo-machete

      - name: Check for unused dependencies
        run: cargo machete --with-metadata

      - name: Build project
        run: cargo build --release

  # Storybook Build Test
  storybook-test:
    name: Storybook Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('front/bun.lock') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build Storybook
        run: bun run build:storybook

      - name: Upload Storybook build
        uses: actions/upload-artifact@v4
        with:
          name: storybook-build
          path: front/storybook-static/
          retention-days: 7

  # Security and Quality Checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Frontend security audit
        working-directory: ./front
        run: bun audit

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Backend security audit
        working-directory: ./back
        run: cargo audit

  # Documentation and Links Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/mlc_config.json'

      - name: Spell check
        uses: crate-ci/typos@master

  # All checks passed
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, storybook-test, security-audit, docs-check]
    if: always()

    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.frontend-test.result }}" != "success" ]]; then
            echo "Frontend tests failed"
            exit 1
          fi
          if [[ "${{ needs.backend-test.result }}" != "success" ]]; then
            echo "Backend tests failed"
            exit 1
          fi
          if [[ "${{ needs.storybook-test.result }}" != "success" ]]; then
            echo "Storybook build failed"
            exit 1
          fi
          if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "Security audit failed"
            exit 1
          fi
          if [[ "${{ needs.docs-check.result }}" != "success" ]]; then
            echo "Documentation check failed"
            exit 1
          fi
          echo "All checks passed successfully! âœ…"

      - name: Success notification
        run: |
          echo "ðŸŽ‰ All automated tests and checks passed!"
          echo "âœ… Frontend tests: ${{ needs.frontend-test.result }}"
          echo "âœ… Backend tests: ${{ needs.backend-test.result }}"
          echo "âœ… Storybook build: ${{ needs.storybook-test.result }}"
          echo "âœ… Security audit: ${{ needs.security-audit.result }}"
          echo "âœ… Documentation: ${{ needs.docs-check.result }}"
